
<?php
  /*
    Copyright 2010 Persistent Systems Limited

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
   */

    /**
    * This code was generated by the tool 'PHPDataSvcUtil.php'.
    * Runtime Version:1.0
    *
    * Changes to this file may cause incorrect behavior and will be lost if
    * the code is regenerated.
    */

    require_once 'Context/ObjectContext.php';
    /**
    * Defines default OData Service URL for this proxy class
    */
    define("DEFAULT_ODATA_SERVICE_URL", "http://localhost/MusicSphere/MusicSphere.svc");
    
   /**
    * Container class MusicSphereEntities, Namespace: MusicSphere
    */
    class MusicSphereEntities extends ObjectContext
    {
    
        protected $_user;
        protected $_registration;
        protected $_song;
        protected $_album;
        protected $_artist;
        protected $_rating;
        protected $_favourites;
        protected $_recentlyplayed;
        
       /**
        * The constructor for MusicSphereEntities accepting service URI
        */
        public function __construct($uri = "")
        {
            if(strlen($uri) == 0)
            {
                $uri = DEFAULT_ODATA_SERVICE_URL;
            }

            if (Utility::reverseFind($uri, '/') != strlen($uri) - 1)
            {
                $uri = $uri . '/';
            }

            $this->_baseURI = $uri;
            parent::__construct($this->_baseURI);
            $this->_entities = array(
                                "user",
                                "registration",
                                "song",
                                "album",
                                "artist",
                                "rating",
                                "favourites",
                                "recentlyplayed");
            $this->_entitySet2Type = array(
                                            "user" => "user", 
                                            "registration" => "registration", 
                                            "song" => "song", 
                                            "album" => "album", 
                                            "artist" => "artist", 
                                            "rating" => "rating", 
                                            "favourites" => "favourites", 
                                            "recentlyplayed" => "recentlyplayed");
            $this->_entityType2Set = array(
                                            "user" => "user", 
                                            "registration" => "registration", 
                                            "song" => "song", 
                                            "album" => "album", 
                                            "artist" => "artist", 
                                            "rating" => "rating", 
                                            "favourites" => "favourites", 
                                            "recentlyplayed" => "recentlyplayed");

            $this->_association = array(
                                         "user_registration" => array(
                                                                         "user" => "*" ,
                                                                         "registration" => "0..1" ), 
                                         "user_favourites" => array(
                                                                         "user" => "*" ,
                                                                         "favourites" => "0..1" ), 
                                         "user_recentlyplayed" => array(
                                                                         "user" => "*" ,
                                                                         "recentlyplayed" => "0..1" ), 
                                         "registration_user" => array(
                                                                         "registration" => "*" ,
                                                                         "user" => "0..1" ), 
                                         "song_album" => array(
                                                                         "song" => "*" ,
                                                                         "album" => "*" ), 
                                         "song_artist" => array(
                                                                         "song" => "*" ,
                                                                         "artist" => "*" ), 
                                         "album_song" => array(
                                                                         "album" => "*" ,
                                                                         "song" => "*" ), 
                                         "artist_song" => array(
                                                                         "artist" => "*" ,
                                                                         "song" => "*" ), 
                                         "rating_song" => array(
                                                                         "rating" => "*" ,
                                                                         "song" => "*" ), 
                                         "rating_user" => array(
                                                                         "rating" => "*" ,
                                                                         "user" => "*" ), 
                                         "favourites_song" => array(
                                                                         "favourites" => "*" ,
                                                                         "song" => "*" ), 
                                         "favourites_user" => array(
                                                                         "favourites" => "*" ,
                                                                         "user" => "*" ), 
                                         "recentlyplayed_song" => array(
                                                                         "recentlyplayed" => "*" ,
                                                                         "song" => "*" ), 
                                         "recentlyplayed_user" => array(
                                                                         "recentlyplayed" => "*" ,
                                                                         "user" => "*" ));

    
            $this->_user = new DataServiceQuery('/'.'user', $this);
            $this->_registration = new DataServiceQuery('/'.'registration', $this);
            $this->_song = new DataServiceQuery('/'.'song', $this);
            $this->_album = new DataServiceQuery('/'.'album', $this);
            $this->_artist = new DataServiceQuery('/'.'artist', $this);
            $this->_rating = new DataServiceQuery('/'.'rating', $this);
            $this->_favourites = new DataServiceQuery('/'.'favourites', $this);
            $this->_recentlyplayed = new DataServiceQuery('/'.'recentlyplayed', $this);

        }

    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset user
         * @return DataServiceQuery
         */
        public function user()
        {
            $this->_user->ClearAllOptions();
            return $this->_user;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset registration
         * @return DataServiceQuery
         */
        public function registration()
        {
            $this->_registration->ClearAllOptions();
            return $this->_registration;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset song
         * @return DataServiceQuery
         */
        public function song()
        {
            $this->_song->ClearAllOptions();
            return $this->_song;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset album
         * @return DataServiceQuery
         */
        public function album()
        {
            $this->_album->ClearAllOptions();
            return $this->_album;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset artist
         * @return DataServiceQuery
         */
        public function artist()
        {
            $this->_artist->ClearAllOptions();
            return $this->_artist;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset rating
         * @return DataServiceQuery
         */
        public function rating()
        {
            $this->_rating->ClearAllOptions();
            return $this->_rating;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset favourites
         * @return DataServiceQuery
         */
        public function favourites()
        {
            $this->_favourites->ClearAllOptions();
            return $this->_favourites;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset recentlyplayed
         * @return DataServiceQuery
         */
        public function recentlyplayed()
        {
            $this->_recentlyplayed->ClearAllOptions();
            return $this->_recentlyplayed;
        }
    
       /**
        * Functions for adding object to the entityset/collection
        */
    
       /**
        * Add user
        * @param user $object
        */
      public function AddTouser($object)
        {
            return parent::AddObject('user', $object);
        }
    
       /**
        * Add registration
        * @param registration $object
        */
      public function AddToregistration($object)
        {
            return parent::AddObject('registration', $object);
        }
    
       /**
        * Add song
        * @param song $object
        */
      public function AddTosong($object)
        {
            return parent::AddObject('song', $object);
        }
    
       /**
        * Add album
        * @param album $object
        */
      public function AddToalbum($object)
        {
            return parent::AddObject('album', $object);
        }
    
       /**
        * Add artist
        * @param artist $object
        */
      public function AddToartist($object)
        {
            return parent::AddObject('artist', $object);
        }
    
       /**
        * Add rating
        * @param rating $object
        */
      public function AddTorating($object)
        {
            return parent::AddObject('rating', $object);
        }
    
       /**
        * Add favourites
        * @param favourites $object
        */
      public function AddTofavourites($object)
        {
            return parent::AddObject('favourites', $object);
        }
    
       /**
        * Add recentlyplayed
        * @param recentlyplayed $object
        */
      public function AddTorecentlyplayed($object)
        {
            return parent::AddObject('recentlyplayed', $object);
        }
    

       /**
        * This function returns the entities.
        */
        public function getEntities()
        {
            return $this->_entities;
        }
    }
  
   /**
    * @class:user
    * @type:EntityType
    * @key:id
    */
    class user extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $id;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:
        * @FixedLength:
        */
        public $fname;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:
        * @FixedLength:
        */
        public $lname;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:
        * @FixedLength:
        */
        public $gender;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:
        * @FixedLength:
        */
        public $email;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:
        * @FixedLength:
        */
        public $phone;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:user_registration
        * @FromRole:user
        * @ToRole:registration
        */
        public $registration;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:user_favourites
        * @FromRole:user
        * @ToRole:favourites
        */
        public $favourites;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:user_recentlyplayed
        * @FromRole:user
        * @ToRole:recentlyplayed
        */
        public $recentlyplayed;
    

       /**
        * Function to create an instance of user
        * @param Edm.Int32 $id
        */
        public static function Createuser(
            $id)
        {   
            $user = new user();
            $user->id = $id;
            return $user;
        }

       /**
        * Constructor for user
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['registration'] = 'registration';
            $this->_entityMap['favourites'] = 'favourites';
            $this->_entityMap['recentlyplayed'] = 'recentlyplayed';
            $this->_entityKey[] = 'id';
            $this->registration = array();
            $this->favourites = array();
            $this->recentlyplayed = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:registration
    * @type:EntityType
    * @key:id
    */
    class registration extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $id;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:
        * @FixedLength:
        */
        public $username;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:
        * @FixedLength:
        */
        public $password;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:
        * @FixedLength:
        */
        public $securityques;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:
        * @FixedLength:
        */
        public $answer;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $approved;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:registration_user
        * @FromRole:registration
        * @ToRole:user
        */
        public $user;
    

       /**
        * Function to create an instance of registration
        * @param Edm.Int32 $id
        */
        public static function Createregistration(
            $id)
        {   
            $registration = new registration();
            $registration->id = $id;
            return $registration;
        }

       /**
        * Constructor for registration
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['user'] = 'user';
            $this->_entityKey[] = 'id';
            $this->user = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:song
    * @type:EntityType
    * @key:id
    */
    class song extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $id;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:
        * @FixedLength:
        */
        public $title;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:
        * @FixedLength:
        */
        public $genre;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:
        * @FixedLength:
        */
        public $location;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:
        * @FixedLength:
        */
        public $category;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:song_album
        * @FromRole:song
        * @ToRole:album
        */
        public $album;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:song_artist
        * @FromRole:song
        * @ToRole:artist
        */
        public $artist;
    

       /**
        * Function to create an instance of song
        * @param Edm.Int32 $id
        */
        public static function Createsong(
            $id)
        {   
            $song = new song();
            $song->id = $id;
            return $song;
        }

       /**
        * Constructor for song
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['album'] = 'album';
            $this->_entityMap['artist'] = 'artist';
            $this->_entityKey[] = 'id';
            $this->album = array();
            $this->artist = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:album
    * @type:EntityType
    * @key:id
    */
    class album extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $id;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:
        * @FixedLength:
        */
        public $name;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:album_song
        * @FromRole:album
        * @ToRole:song
        */
        public $song;
    

       /**
        * Function to create an instance of album
        * @param Edm.Int32 $id
        */
        public static function Createalbum(
            $id)
        {   
            $album = new album();
            $album->id = $id;
            return $album;
        }

       /**
        * Constructor for album
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['song'] = 'song';
            $this->_entityKey[] = 'id';
            $this->song = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:artist
    * @type:EntityType
    * @key:id
    */
    class artist extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $id;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:
        * @FixedLength:
        */
        public $name;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:artist_song
        * @FromRole:artist
        * @ToRole:song
        */
        public $song;
    

       /**
        * Function to create an instance of artist
        * @param Edm.Int32 $id
        */
        public static function Createartist(
            $id)
        {   
            $artist = new artist();
            $artist->id = $id;
            return $artist;
        }

       /**
        * Constructor for artist
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['song'] = 'song';
            $this->_entityKey[] = 'id';
            $this->song = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:rating
    * @type:EntityType
    * @key:id
    */
    class rating extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $id;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $stars;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:rating_song
        * @FromRole:rating
        * @ToRole:song
        */
        public $song;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:rating_user
        * @FromRole:rating
        * @ToRole:user
        */
        public $user;
    

       /**
        * Function to create an instance of rating
        * @param Edm.Int32 $id
        */
        public static function Createrating(
            $id)
        {   
            $rating = new rating();
            $rating->id = $id;
            return $rating;
        }

       /**
        * Constructor for rating
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['song'] = 'song';
            $this->_entityMap['user'] = 'user';
            $this->_entityKey[] = 'id';
            $this->song = array();
            $this->user = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:favourites
    * @type:EntityType
    * @key:id
    */
    class favourites extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $id;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:favourites_song
        * @FromRole:favourites
        * @ToRole:song
        */
        public $song;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:favourites_user
        * @FromRole:favourites
        * @ToRole:user
        */
        public $user;
    

       /**
        * Function to create an instance of favourites
        * @param Edm.Int32 $id
        */
        public static function Createfavourites(
            $id)
        {   
            $favourites = new favourites();
            $favourites->id = $id;
            return $favourites;
        }

       /**
        * Constructor for favourites
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['song'] = 'song';
            $this->_entityMap['user'] = 'user';
            $this->_entityKey[] = 'id';
            $this->song = array();
            $this->user = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:recentlyplayed
    * @type:EntityType
    * @key:id
    */
    class recentlyplayed extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $id;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $playeddate;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:recentlyplayed_song
        * @FromRole:recentlyplayed
        * @ToRole:song
        */
        public $song;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:recentlyplayed_user
        * @FromRole:recentlyplayed
        * @ToRole:user
        */
        public $user;
    

       /**
        * Function to create an instance of recentlyplayed
        * @param Edm.Int32 $id
        */
        public static function Createrecentlyplayed(
            $id)
        {   
            $recentlyplayed = new recentlyplayed();
            $recentlyplayed->id = $id;
            return $recentlyplayed;
        }

       /**
        * Constructor for recentlyplayed
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['song'] = 'song';
            $this->_entityMap['user'] = 'user';
            $this->_entityKey[] = 'id';
            $this->song = array();
            $this->user = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
?>
  